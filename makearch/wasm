X11LIB=/usr/X11R6/lib
X11INC=/usr/X11R6/include
THREADLIBS=

# assumes you have downloaded boost and graphviz to ~/src/ and building in those dirs
SRC_DIR=$(HOME)/src
BOOST_INC=$(SRC_DIR)/boost_1_86_0
BOOST_THREAD_LIB=$(SRC_DIR)/boost_1_86_0/bin.v2/libs/thread/build/emscripten-3.1.71/release/link-static/target-os-none/threading-multi/visibility-hidden
BOOST_SYSTEM_LIB=$(SRC_DIR)/boost_1_86_0/bin.v2/libs/system/build/emscripten-3.1.71/release/link-static/target-os-none/threading-multi/visibility-hidden
# note the older graphviz - could be made to compile with latest type signatures
# but there is little need since dynagraph only uses ancient features
GRAPHVIZ_SRC_DIR=$(SRC_DIR)/graphviz-2.46.1
GRAPHVIZ_CDT_LIB=$(GRAPHVIZ_SRC_DIR)/lib/cdt
GRAPHVIZ_CGRAPH_LIB=$(GRAPHVIZ_SRC_DIR)/lib/cgraph
GRAPHVIZ_PATHPLAN_LIB=$(GRAPHVIZ_SRC_DIR)/lib/pathplan
GRAPHVIZ_INCS=-I$(GRAPHVIZ_SRC_DIR)/lib/cdt -I$(GRAPHVIZ_SRC_DIR)/lib/cgraph -I$(GRAPHVIZ_SRC_DIR)/lib/pathplan

# install simple Makefiles for graphviz wasm and build with those
build-graphviz:
	cp -R graphviz-makefiles/* $(GRAPHVIZ_SRC_DIR)/lib	
	cp -R makearch $(GRAPHVIZ_SRC_DIR)/lib/makearch/
	(cd $(GRAPHVIZ_SRC_DIR)/lib; \
	  mkdir cdt/.deps cgraph/.deps pathplan/.deps; \
    cat update-cfiles.csv | while IFS=':' read cfile cheader; do \
      cat $$cfile | sed "s:<$$cheader>:\"$$cheader\":" > $$cfile.new && mv $$cfile.new $$cfile; \
    done; \
	  make libcdt.a libcgraph.a libpathplan.a)  # all does not work

CC=emcc
CPP=emcc
CPPSLD=em++
YACC=yacc
FLEX=flex -8
BISON=bison
SED=sed
LN=ln
RM=rm -f
RANLIB=ranlib
MKDIR=mkdir
MKPATH=mkdir -p
AR=ar
SHLIB_LD=ld -shared
SHLIB_SUFFIX=.so
MV=mv
CP=cp
AWK=awk
SORT=sort
INSTALL=cp

CCFLAGS=-O3 -D__Mac_OSX__=1 -DHAVE_FILE_R=1 -DHAVE_TERMIOS_H=1 -pthread -DDYNAGRAPH_WASM -DDYNAGRAPH_NO_THREADS -I$(EMSDK)/upstream/emscripten/cache/sysroot/include -fexceptions
LDFLAGS=-Wl,-L$(GRAPHVIZ_CDT_LIB),-L$(GRAPHVIZ_CGRAPH_LIB),-L$(GRAPHVIZ_PATHPLAN_LIB) -sASYNCIFY -sEXPORTED_RUNTIME_METHODS=stringToNewUTF8 -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='$$stringToNewUTF8' -fexceptions --pre-js incrface-print.js
# LEFTYLIBS=-lSM -lICE
TCLDOTLIBS=-ldl

RANLIB=:

MAKEDEPEND = gcc -M $(CPPFLAGS) $(DEFINES) $(INCS) -o $(df).d $<
CCCOMMAND = $(CC) -c $(CCFLAGS) $(DEFINES) $(INCS) $*.c -o $@
CPPCOMMAND = $(CPP) -c $(CCFLAGS) $(CLANGOPTS) $(DEFINES) $(INCS) $*.cpp -o $@
